library(igraph)
### Inserta aqui tu codigo
dd <- read.csv("red_contactos.csv", sep=';')
g<-graph.data.frame(dd, directed=FALSE)
summary(g)
sum(is.loop(g))
g <- simplify(g, edge.attr.comb = "sum")
View(g)
g
### Inserta aqui tu codigo
is.connected(g)
components <- clusters(g, mode="weak")
View(components)
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(g)[components$membership == biggest_cluster_id]
connected_g <- induced_subgraph(g, vert_ids)
is.connected(connected_g)
library(igraph)
library(ggplot2)
### Inserta aqui tu codigo
dd <- read.csv("red_contactos.csv", sep=';')
g<-graph.data.frame(dd, directed=FALSE)
summary(g)
sum(is.loop(g))
E(g)$weight <- 1
g <- simplify(g, edge.attr.comb = "sum")
sum(is.loop(g))
### Inserta aqui tu codigo
is.connected(g)
components <- clusters(g, mode="weak")
biggest_cluster_id <- which.max(components$csize)
vert_ids <- V(g)[components$membership == biggest_cluster_id]
conn_g <- induced_subgraph(g, vids=vert_ids)
is.connected(conn_g)
#grado medio
mean(degree(conn_g))
#distancia media
average.path.length(conn_g)
#diametro
diameter(conn_g)
#diametro
diameter(conn_g)
#grade distribution
df <- data.frame(degree = degree(conn_g))
ggplot(df) +
geom_bar(aes(x=degree))
ggplot(df) +
geom_bar(aes(x=degree))
deg.dist <- degree_distribution(conn_g, cumulative=T, mode="all")
deg <- degree(conn_g)
deg.dist <- degree_distribution(conn_g, cumulative=T, mode="all")
deg <- degree(conn_g)
plot(x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange", xlab="Degree", ylab="Cumulative Frequency")
# Clustering
components <- clusters(conn_g, mode="weak")
# Clustering
components <- clusters(conn_g, mode="weak")
components
components$membership
components$csize
components$no
diversity = diversity(conn_g, weights = NULL, vids = V(conn_g))
# entropy
diversity = diversity(conn_g, weights = NULL, vids = V(conn_g))
diversity
bets<-betweenness(conn_g,directed=FALSE)
clos<-closeness(conn_g
)
bets<-betweenness(conn_g,directed=FALSE)
clos<-closeness(conn_g)
mean(bets)
bets<-betweenness(conn_g,directed=FALSE)
bets<-betweenness(conn_g,directed=FALSE)
clos<-closeness(conn_g)
mean(bets)
comms<-fastgreedy.community(conn_g)
modularity(comms)
comms2<-infomap.community(conn_g)
compare(comm1 = comms, comm2 = comms2,method = "nmi")
### Inserta aqui tu codigo
plot(conn_g, vertex.color=membership(comms))
### Inserta aqui tu codigo
cols<-rainbow(max(comms$membership))[comms$membership]
png("tt.png",width=1200, height=1200, res=100)
plot(g,layout=ll,vertex.label="",
vertex.color=cols,
vertex.size=log(bets+2))
### Inserta aqui tu codigo
cols<-rainbow(max(comms$membership))[comms$membership]
ll<-layout.fruchterman.reingold(conn_g)
png("tt.png",width=1200, height=1200, res=100)
plot(conn_g,layout=ll,vertex.label="",
vertex.color=cols,
vertex.size=log(bets+2))
### Inserta aqui tu codigo
cols<-rainbow(max(comms2$membership))[comms2$membership]
### Inserta aqui tu codigo
cols<-rainbow(max(comms2$membership))[comms2$membership]
ll<-layout.fruchterman.reingold(conn_g)
png("tt.png",width=1200, height=1200, res=100)
plot(conn_g,layout=ll,vertex.label="",
vertex.color=cols,
vertex.size=log(bets+2))
dev.off()
comms2<-infomap.community(conn_g)
### Inserta aqui tu codigo
cols<-rainbow(max(comms2$membership))[comms2$membership]
ll<-layout.fruchterman.reingold(conn_g)
png("tt.png",width=1200, height=1200, res=100)
plot(conn_g,layout=ll,vertex.label="",
vertex.color=cols,
vertex.size=log(bets+2))
dev.off()
### Inserta aqui tu codigo
cols<-rainbow(max(comms$membership))[comms$membership]
ll<-layout.fruchterman.reingold(conn_g)
png("tt.png",width=1200, height=1200, res=100)
plot(conn_g,layout=ll,vertex.label="",
vertex.color=cols,
vertex.size=log(bets+2))
dev.off()
### Inserta aqui tu codigo
cols<-rainbow(max(comms2$membership))[comms2$membership]
ll<-layout.fruchterman.reingold(conn_g)
png("tt.png",width=1200, height=1200, res=100)
plot(conn_g,layout=ll,vertex.label="",
vertex.color=cols,
vertex.size=log(bets+2))
dev.off()
comms<-fastgreedy.community(conn_g) #greedy
modularity(comms)
comms2<-infomap.community(conn_g)
comms2<-infomap.community(conn_g)
comms3<-walktrap.community(conn_g)
comms4<-label.propagation.community(conn_g)
comms5<-multilevel.community(conn_g)
compare(comm1 = comms, comm2 = comms2,method = "nmi")
### Inserta aqui tu codigo
cols<-rainbow(max(comms$membership))[comms$membership]
ll<-layout.fruchterman.reingold(conn_g)
png("tt.png",width=1200, height=1200, res=100)
plot(conn_g,layout=ll,vertex.label="",
vertex.color=cols,
vertex.size=log(bets+2))
dev.off()
plot(conn_g,layout=ll,vertex.label="",
vertex.color=cols,
vertex.size=log(bets+2))
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(igraph)
library(ggplot2)
### Inserta aqui tu codigo
dd <- read.csv("red_contactos.csv", sep=';')
g<-graph.data.frame(dd, directed=FALSE)
summary(g)
sum(is.loop(g))
E(g)$weight <- 1
g <- simplify(g, edge.attr.comb = "sum")
sum(is.loop(g))
### Inserta aqui tu codigo
is.connected(g)
components <- clusters(g, mode="weak")
#grado medio
mean(degree(conn_g))
#distancia media
average.path.length(conn_g)
#diametro
diameter(conn_g)
#diametro
diameter(conn_g)
#grade distribution
df <- data.frame(degree = degree(conn_g))
ggplot(df) +
geom_bar(aes(x=degree))
ggplot(df) +
geom_bar(aes(x=degree))
deg.dist <- degree_distribution(conn_g, cumulative=T, mode="all")
deg <- degree(conn_g)
plot(x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange", xlab="Degree", ylab="Cumulative Frequency")
# Clustering
components <- clusters(conn_g, mode="weak")
components$csize
components$no
# entropy
diversity = diversity(conn_g, weights = NULL, vids = V(conn_g))
# Clustering
components <- clusters(conn_g, mode="strong")
components$csize
components$no
# entropy
diversity = diversity(conn_g, weights = NULL, vids = V(conn_g))
bets<-betweenness(conn_g,directed=FALSE)
bets<-betweenness(conn_g,directed=FALSE)
clos<-closeness(conn_g)
mean(bets)
V(conn_g)
class(V(conn_g))
sample.int(10, 5)
len(V(g))
length(V(g))
infected_nodes <- sample.int(length(V(g)), N)
infected_nodes <- sample.int(length(V(g)), 5)
infected_nodes
V(g)[0]
range(1, 10)
1:10
i = c(1, 2, 3)
V(g)[i]
a <- c()
b <- c(5, a)
b
E(g)$weith == 1
E(g)$weith == 2
E(g)$weight
E(g)$weight == 1
E(g)[E(g)$weight == 1]
length(E(g)[E(g)$weight == 1])
len(E(g))
length(E(g))
